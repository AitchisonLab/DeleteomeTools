for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres) + geom_bar()
print(gp)
}
}
}
class(tmodres)
head(tmodres)
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("Title", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres) + geom_bar()
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("Title", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = Title, y = neglogfdr)) + geom_bar()
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("Title", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(y = neglogfdr)) + geom_bar()
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("Title", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres) + geom_bar(aes(y = neglogfdr)) + coord_flip()
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres) + geom_bar(aes(y = neglogfdr)) + coord_flip()
print(gp)
}
}
}
tmodres
for(tp in c("BL", "D1", "D3")[1]){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip()
for(tp in c("BL", "D1", "D3")[1]){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip()
print(gp)
}
}
}
tmodres
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
dir
tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = tmodres$ID)
tmodres
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip()
print(gp)
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip()
print(gp)
for(tp in c("BL", "D1", "D3")[1]){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip()
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip()
+ ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA"))
print(gp)
}
}
}
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA"))
print(gp)
}
}
library(ggplot2)
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new()
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA")) +
xlab("-log10(FDR-adjusted P-value") +
ylab("Module")
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new(width = 10, noRStudioGD = T)
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA")) +
xlab("-log10(FDR-adjusted P-value") +
ylab("Module")
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
if(dir=="Pos") tmodres <- tmodresPos
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new(width = 10, noRStudioGD = T)
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA")) +
ylab("-log10(FDR-adjusted P-value") +
xlab("Module")
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
barcolor = "darkblue"
if(dir=="Pos"){
tmodres <- tmodresPos
barcolor = "darkred"
}
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new(width = 10, noRStudioGD = T)
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity") + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA")) +
ylab("-log10(FDR-adjusted P-value") +
xlab("Module")
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
barcolor = "darkblue"
if(dir=="Pos"){
tmodres <- tmodresPos
barcolor = "darkred"
}
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new(width = 10, noRStudioGD = T)
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity", fill = barcolor) + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA")) +
ylab("-log10(FDR-adjusted P-value") +
xlab("Module")
print(gp)
}
}
}
for(tp in c("BL", "D1", "D3")[2]){
for(sex in c("MaleAndFemale", "Male", "Female")){
for(dir in c("Pos","Neg")){
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
barcolor = "darkblue"
if(dir=="Pos"){
tmodres <- tmodresPos
barcolor = "darkred"
}
else tmodres <- tmodresNeg
tmodres$neglogfdr <- -log10(tmodres$adj.P.Val)
tmodres$ID <- paste0(tmodres$ID, " - ", tmodres$Title)
tmodres$ID <- factor(tmodres$ID, levels = rev(tmodres$ID))
tmodres <- tmodres[tmodres$neglogfdr>=2.0, ]
tmodres <- tmodres[ , c("ID", "neglogfdr")]
dev.new(width = 10, noRStudioGD = T)
gp <- ggplot(data = tmodres, aes(x = ID, y = neglogfdr)) + geom_bar(stat = "identity", fill = barcolor) + coord_flip() +
ggtitle(paste0("Timepoint: ", tp, ", Sex:", sex, ", ", dir, " correlation with ELISA")) +
ylab("-log10(FDR-adjusted P-value") +
xlab("Module")
print(gp)
}
}
}
load(paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_", dir, "_", tp, "_Week4afterPrimeELISA_spearman_", sex, ".RData"))
barcolor = "darkblue"
tmodres <- tmodresNeg
head(tmodres)
library(ggplot2)
library(DESeq2)
library(BiocParallel)
register(SnowParam(8))
library(limma)
library(readxl)
library(org.Hs.eg.db)
library(clusterProfiler)
library(biomaRt)
library(tmod)
# Function for running tmod analyses
tmodAnalysis <- function(corres=NA, namedgeneids = NA, fullmap = NA, tmodharmonized = NA, tp=NA, suffix=NA, sexsuffix = NA){
cordfgsea <- corres[corres$Gene %in% namedgeneids, ]
cordfgsea <- cordfgsea[order(cordfgsea$corR, decreasing = T), ]
cordfgsea$HumanGeneName <- gsub("\\|.*", "", cordfgsea$HumanGeneName)  # Takes first entry if multiple homologs mapped
# Use harmonized gene name map produced in makeHarmonizedLUTforModuleAnalysis.R to convert to harmonized gene names
tmodinput <- cordfgsea$HumanGeneName
tmodinput <- na.omit(fullmap[tmodinput, "SYMBOL"])
# Results when gene listed sorted high to low
tmodresPos <- tmodCERNOtest(tmodinput, mset = tmodharmonized)
tmodresnamedPos <- tmodresPos[ ! grepl("^Undetermined$|^TBA$", tmodresPos$Title), ]
message("tmod on genes sorted high to low")
print(tmodresnamedPos)
save(tmodresPos, file = paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_Pos_", tp, suffix, sexsuffix, ".RData"))
# Results with inverted gene list
tmodresNeg <- tmodCERNOtest(rev(tmodinput), mset = tmodharmonized)
tmodresnamedNeg <- tmodresNeg[ ! grepl("^Undetermined$|^TBA$", tmodresNeg$Title), ]
message("tmod on genes sorted low to high")
print(tmodresnamedNeg)
save(tmodresNeg, file = paste0("Y:/mneal/IAVIpanVSVstudy/analysis/tmod/tmodResults_Neg_", tp, suffix, sexsuffix, ".RData"))
}
set.seed(123)
use4wksELISA <- T  # This should be true unless you have a good reason for using the LAST ELISA values instead of using those taken 4 weeks after prime
suffix <- "_lastELISA"
if(use4wksELISA) suffix <- "_Week4afterPrimeELISA"
cormethod <- "spearman"  # "pearson", "kendall", or "spearman"
corsigfdrcut <- 0.01 # Thomas recommended 0.01 here, 0.5 for R
corsigRcut <- 0.5  # 0.5, 0
suffix <- paste0(suffix, "_", cormethod)
tmodsuffix <- suffix  # suffixes for tmod output don't include significance criteria for correlation tests
suffix <- paste0(suffix, "_CorFDR", corsigfdrcut, "_CorR", corsigRcut)
# Load count data
cdataALL <- read.csv("Y:/mneal/IAVIpanVSVstudy/analysis/Pan-EID_count_matrix_v2.tsv", header=TRUE, sep="\t", row.names="Geneid", stringsAsFactors = F)
cdata <- cdataALL[, ! names(cdataALL) %in% c("external_gene_name", "description", "SDos_RNA_ctrl")]
# Some genes are for viruses. If NA, make them 0
cdata[is.na(cdata)] <- 0
# Remove genes where no counts were observed
cdata <- cdata[rowSums(cdata)>0,]
# Make LUT for gene IDs
message("Loading gene identifier look-up table")
load("Y:/mneal/IAVIpanVSVstudy/analysis/tmod_LIandDCmodules_harmonized_to_orgHsegdb_3_19_1.RData")  # tmodharmonized (custom modules for tmod)
load("Y:/mneal/IAVIpanVSVstudy/analysis/GeneNameHarmonizationMap_orgHsegdb_3_19_1.RData")  # fullmap
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
load("J:/Lab Files/Electronic Notebooks/Current Lab Members/Ling/Plasmodia_EGRIN/manuscript1/ModelDemo/EGRIN.RData")
head(EGRIN)
res <- c()
for(tr in unique(EGRIN$TR)){
thesum <- sum(EGRIN[EGRIN$TR==tr, "abs.weight."])
res <- c(res, thesum)
}
names(res) <- unique(EGRIN$TR)
head(rs)
head(res)
head(sort(res))
head(rev(sort(res)))
head(rev(sort(res)), 10)
rev(sort(table(EGRIN$TR)))
res['PF3D7_1222600']
rev(sort(table(EGRIN$TR)))['PF3D7_1222600']
dev.new()
hist(res)
hist(res, breaks = 20)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
ensembl <- useEnsembl(biomart = "genes", dataset = "mfascicularis_gene_ensembl", version = 111)
library(devtools)
install_github("AitchisonLab/DeleteomeTools")
install_github("AitchisonLab/DeleteomeTools")
install_github("AitchisonLab/DeleteomeTools", force = T)
library(DeleteomeTools)
x <- getSimilarStrainsByReciprocalCorrelation("nup170", outputdir = "Y:/mneal/NUP170/deleteome/temp")
y <- getStrainSignature("nup170")
# ...then generate a heatmap showing expression values for the query strain and its significantly similar
# deleteome strains. Rows are the deletion strain's differentially-expressed genes. Columns are the deletion
# strains found to be similar to the query strain.
hm1 <- makeHeatmapDeleteomeMatches(strain="nup170",
strainSignature=y,
otherStrains=x,
filePrefix="StrainMatches",
titleDesc="reciprocal correlation",
MthreshForTitle=0,
pDEGsForTitle=0.05,
pMatchesForTitle=0.05,
quantileForTitle=0.1,
imageWidth=5000,
outputDir="Y:/mneal/NUP170/deleteome/temp",
printToFile=T)
# Make the same heatmap as above but only show expression values for SUBTELOMERIC genes. This demonstrates
# how users can make heatmaps for comparing subtelomeric gene expression patterns between a query strain
# and other Deleteome strains.
# NOTE: if there are less than 2 subtelomeric genes in the strain's signature
# this will report an error indicating insufficient rows or columns for the heatmap
hm2 <- makeHeatmapDeleteomeMatches(strain="nup170",
strainSignature=y,
otherStrains=x,
filePrefix="StrainMatches_SUBTELO",
titleDesc="reciprocal correlation",
MthreshForTitle=0,
pDEGsForTitle=0.05,
pMatchesForTitle=0.05,
quantileForTitle=0.1,
subteloGenesOnly=T,
imageWidth=5000,
outputDir="Y:/mneal/NUP170/deleteome/temp",
printToFile=T)
# Generate a heatmap as in the first heatmap example but show query strain and manually-selected strains
# in columns. This demonstrates how users can compare expression values of a query strain's
# differentially-expressed genes to corresponding values in any arbitrary Deleteome strain.
hm3 <- makeHeatmapDeleteomeMatches(strain="nup170",
strainSignature=y,
otherStrains= c("hmo1", "rif1", "sir4", "ctf8", "ctf18", "dcc1"),
filePrefix="ManuallySelectedStrains",
titleDesc="manual selection",
MthreshForTitle=0,
pDEGsForTitle=0.05,
pMatchesForTitle=0.05,
quantileForTitle=0.1,
imageWidth=2550,
outputDir="Y:/mneal/NUP170/deleteome/temp",
printToFile=T)
makeGenomicPositionHistogram(strain = "nup170",
Mthresh = 0,
pDEGs = 0.05,
yMax = 40,
outputDir = "Y:/mneal/NUP170/deleteome/temp/",
printToFile = T)
makeMountainLakePlot(strain = "nup170",
Mthresh = 0,
pDEGs = 0.05,
yMax = 40,
outputDir = "Y:/mneal/NUP170/deleteome/temp/",
printToFile = T)
makeMountainLakePlot(strain = "nup170",
Mthresh = 0,
pDEGs = 0.05,
yMax = 40,
outputDir = "Y:/mneal/NUP170/deleteome/temp/",
printToFile = F)
gores <- DeleteomeTools::GOenrichmentOnStrains(strains = x, padjthresh = 0.1, useDeleteomeBackground = T)
gores
.rs.restartR()
library(devtools)
install_github("AitchisonLab/DeleteomeTools")
library(DeleteomeTools)
source("Y:/mneal/NUP170/deleteome/testingRpackage.R")
install_github("AitchisonLab/DeleteomeTools")
install_github("AitchisonLab/DeleteomeTools", force = T)
detach("package:DeleteomeTools", unload=TRUE)
install_github("AitchisonLab/DeleteomeTools", force = T)
check()
setwd("Y:/mneal/NUP170/deleteome/Deleteome-Tools/")
check()
```
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Sc.sgd.db", "clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("org.Sc.sgd.db", "clusterProfiler"))
detach("package:clusterProfiler", unload = T)
detach("package:org.Sc.sgd.db", unload = T)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("org.Sc.sgd.db", "clusterProfiler"))
detach("package:org.Sc.sgd.db", unload = T)
detach("package:clusterProfiler", unload = T)
detach("package:clusterProfiler", unload = TRUE)
detach("package:devtools", unload = TRUE)
library(org.Sc.sgd.db)
detach("package:org.Sc.sgd.db", unload = T)
detach("package:clusterProfiler", unload = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("org.Sc.sgd.db", "clusterProfiler"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Sc.sgd.db")
